kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: BRANCH
    required: true
  - name: APP
    required: true
    value: geoserver
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: ACCESS_MODE
    required: true
    value: ReadWriteOnce
  - name: STORAGE
    required: true
    value: 10Gi
  - name: APP_IMAGE
    required: true
    # docker manifest inspect ghcr.io/luomus/geoserver-image:main -v | jq '.Descriptor.digest'
    value: ghcr.io/luomus/geoserver-image:main@sha256:25c3802d97f20dbfc16414201173dbb029b91da1e82fc8ea1a579e8512810979
  - name: APP_PORT
    required: true
    value: "8080"
  - name: APP_HEALTHCHECK
    required: true
    value: /geoserver
  - name: APP_PATH
    required: true
    value: /opt/geoserver_data
  - name: SKIP_DEMO_DATA
    requried: true
    value: "true"
  - name: ROOT_WEBAPP_REDIRECT
    requried: true
    value: "true"
  - name: INSTALL_EXTENSIONS
    requried: true
    value: "true"
  - name: STABLE_EXTENSIONS
    requried: true
    value: "vectortiles,wps,printing,control-flow,pyramid,monitor,inspire,csw"
  - name: DB
    required: true
    value: postgis
  - name: DB_NAME
    required: true
    value: gis
  - name: DB_IMAGE
    required: true
    # docker manifest inspect ghcr.io/luomus/postgis-image:main -v | jq '.Descriptor.digest'
    value: ghcr.io/luomus/postgis-image:main@sha256:00d15dcc7f022982314646b29608a5083fb2c2250064dfd3513ae5028d92dc05
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "PGPASSWORD=$POSTGRES_PASSWORD
        psql -h 0.0.0.0 -U $POSTGRES_USER -d postgres -c \"SELECT 1\""
    ]'
  - name: DB_PATH
    required: true
    value: /var/lib/postgresql/data
  - name: DB_DATA
    required: true
    value: /pgdata
  - name: DB_PORT
    required: true
    value: "5432"
  - name: DB_USER
    required: true
  - name: DB_PASSWORD
    required: true
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${APP}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${DB}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  type: Opaque
  data:
    db_user: ${DB_USER}
    db_password: ${DB_PASSWORD}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
      spec:
        containers:
        - image: ${APP_IMAGE}
          name: ${APP}-${BRANCH}
          volumeMounts:
          - mountPath: ${APP_PATH}
            name: ${APP}-${BRANCH}
          ports:
            - containerPort: ${{APP_PORT}}
          startUpProbe:
            httpGet:
              path: ${APP_HEALTHCHECK}
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 100
          livenessProbe:
            httpGet:
              path: ${APP_HEALTHCHECK}
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: ${APP_HEALTHCHECK}
              port: ${{APP_PORT}}
            periodSeconds: 5
          env:
          - name: SKIP_DEMO_DATA
            value: ${SKIP_DEMO_DATA}
          - name: ROOT_WEBAPP_REDIRECT
            value: ${ROOT_WEBAPP_REDIRECT}
          - name: INSTALL_EXTENSIONS
            value: ${INSTALL_EXTENSIONS}
          - name: STABLE_EXTENSIONS
            value: ${STABLE_EXTENSIONS}
        volumes:
        - name: ${APP}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${APP}-${BRANCH}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
      spec:
        containers:
        - image: ${DB_IMAGE}
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: ${DB_PATH}
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          startupProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: 5
            failureThreshold: 10
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: 5
          env:
          - name: POSTGRES_DB
            value: ${DB_NAME}
          - name: PGDATA
            value: ${DB_PATH}${DB_DATA}
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    port:
      targetPort: ${{APP_PORT}}
    to:
      kind: Service
      name: ${APP}-${BRANCH}
