kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: BRANCH
    required: true
  - name: APP
    required: true
    value: geoserver
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: ACCESS_MODE
    required: true
    value: ReadWriteOnce
  - name: STORAGE
    required: true
    value: 10Gi
  - name: APP_PORT
    required: true
    value: "8080"
  - name: APP_HEALTHCHECK
    required: true
    value: /geoserver
  - name: DB
    required: true
    value: postgis
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "PGPASSWORD=$POSTGRES_PASSWORD
        psql -h 0.0.0.0 -U $POSTGRES_USER -d postgres -c \"SELECT 1\""
    ]'
  - name: DB_PATH
    required: true
    value: /var/lib/postgresql/data
  - name: DB_DATA
    required: true
    value: /pgdata
  - name: DB_PORT
    required: true
    value: "5432"
  - name: HOST
    required: true
  - name: DB_USER
    required: true
  - name: DB_PASSWORD
    required: true
  - name: OBJECT_STORE
    required: true
  - name: RCLONE_ACCESS_KEY_ID
    required: true
  - name: RCLONE_SECRET_ACCESS_KEY
    required: true
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${APP}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${DB}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP}-${BRANCH}:latest
    source:
      type: Git
      git:
        uri: https://github.com/luomus/${APP}.git
        ref: ${BRANCH}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  data:
    branch: ${BRANCH}
    object_store: ${OBJECT_STORE}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  type: Opaque
  data:
    db_user: ${DB_USER}
    db_password: ${DB_PASSWORD}
    rclone_access_key_id: ${RCLONE_ACCESS_KEY_ID}
    rclone_secret_access_key: ${RCLONE_SECRET_ACCESS_KEY}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
      spec:
        containers:
        - image: ${APP}-${BRANCH}:latest
          name: ${APP}-${BRANCH}
          volumeMounts:
          - mountPath: /opt/geoserver_data
            name: ${APP}-${BRANCH}
          ports:
            - containerPort: ${{APP_PORT}}
          startupProbe:
            httpGet:
              path: ${APP_HEALTHCHECK}
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 100
          livenessProbe:
            httpGet:
              path: ${APP_HEALTHCHECK}
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: ${APP_HEALTHCHECK}
              port: ${{APP_PORT}}
            periodSeconds: 5
          env:
          - name: PROXY_BASE_URL
            value: https://${HOST}/${APP}
          - name: GEOSERVER_CSRF_WHITELIST
            value: ${HOST}
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          - name: OBJECT_STORE
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: object_store
          - name: RCLONE_CONFIG_DEFAULT_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: rclone_access_key_id
          - name: RCLONE_CONFIG_DEFAULT_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: rclone_secret_access_key
        volumes:
        - name: ${APP}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${APP}-${BRANCH}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
      spec:
        containers:
        # docker manifest inspect ghcr.io/luomus/postgis-image:main -v | jq '.Descriptor.digest'
        - image: ghcr.io/luomus/postgis-image:main@sha256:dddeefb4308827a07aa82b0908f694bb823326f823207292e1f2532e9aa4907f
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: ${DB_PATH}
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          startupProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: 5
            failureThreshold: 10
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: 5
          env:
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          - name: OBJECT_STORE
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: object_store
          - name: PGDATA
            value: ${DB_PATH}${DB_DATA}
          - name: POSTGRES_DB
            value: gis
          - name: POSTGRES_PORT
            value: ${DB_PORT}
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
          - name: RCLONE_CONFIG_DEFAULT_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: rclone_access_key_id
          - name: RCLONE_CONFIG_DEFAULT_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: rclone_secret_access_key
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host:
    port:
      targetPort: ${{APP_PORT}}
    to:
      kind: Service
      name: ${APP}-${BRANCH}
